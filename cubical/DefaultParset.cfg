[data]
_Help			= Visibility data options
ms		        =           # MS name #type:str
column          = DATA      # MS column to read for data    #metavar:COLUMN #type:str
time-chunk       = 16
freq-chunk       = 16
chunk-on-scans   = 1        # If True, then time chunks will be broken up by change in SCAN_NUMBER. #type:bool
single-chunk     =

[sel]
_Help = Data selection options
field                  = 0             # FIELD_ID to read. #metavar:FIELD #type:int
ddid                   = None          # DATA_DESC_IDs to read. Default reads all. Can be specified as e.g. "5",
    "5,6,7", ""5~7" (inclusive range), "5:8" (exclusive range), "5:" (from 5 to last). #metavar:DDID
taql                   =               # additional TaQL selection string #metavar:TaQL #type:str

[model]
_Help			= Calibration model options
lsm             =               # predict model visibilities from given LSM (using Montblanc). #metavar:FILENAME #type:str
column          = MODEL_DATA    # read additional model visibilities from given MS column.
ddes            = 0             # use DDEs (--Model-LSM must be set).
beam-pattern	= None		    # Apply beams if specified eg. 'beam_$(corr)_$(reim).fits' or 'beam_$(CORR)_$(REIM).fits'
beam-l-axis		= None
beam-m-axis		= None  

[weight]
_Help			= Weighting options
column          = WEIGHT_SPECTRUM   # column to read weights from

[flags]
_Help			= Flagging options
apply             = legacy
auto-init         = legacy     # insert BITFLAG column if missing, and initialize named flagset from FLAG/FLAG_ROW
save              = cubecal    # save flags to named flagset in BITFLAG. If none or 0, doesn't save
reinit-bitflags   = 0          # if true, reninitializes BITFLAG column from scratch. Useful if you ended up with a dead one. #type:bool
tf-chisq-median   = 1.2
tf-np-median      = 0.5
time-density      = 0.5
chan-density      = 0.5
ddid-density      = 0.5

[sol]
_Help			 = Solution options
precision        = 32            # Solve in single or double precision #options:32|64
jones-type       = complex-2x2   # Type of Jones matrix to solve for #options:complex-2x2|phase-diag|robust-2x2
time-int         = 1
freq-int         = 1
max-iter         = 200
delta-g          = 1e-6
delta-chi        = 1e-5
chi-int          = 5
clip-low         = .1   # amplitude clipping: flag solutions with diagonal amplitudes below this value. #metavar:AMPL #type:float
clip-high        = 10   # amplitude clipping: flag solutions with any amplitudes above this value. #metavar:AMPL #type:float
clip-after-iter  = 5    # amplitude clipping begins after this number of iterations. #metavar:NITER #type:int
last-rites       = 1    # Re-estimate chi^2 and noise at the end of a solution cycle. Disabling last rites can save a
    bit of time, but makes the post-solution stats less informative. #type:bool

[dist]
_Help			= Parallelization and distribution options
ncpu            = 0                 # number of CPUs to use (0 or 1 disables parallelism) #type:int
min-chunks      = 32                # minimum number of chunks to load into memory at once

[out]
_Help			= Options for output products
name		    = cubecal           # Base name of output files. #metavar:BASENAME #type:str
vis             = corrected         # Save what visibilities to MS. #options:None|corrected|residual
column          = CORRECTED_DATA    # Output MS column name for --Output-Vis.
plots           = 1                 # Generate summary plots. #type:bool
plots-show      = 1                 # Show summary plots interactively. #type:bool


[log]
_Help = Options related to logging
memory 			= 1      # log memory use #type:bool
boring 			= 0      # disable progress bars and other pretty console output #type:bool
append 			= 0      # append to log file if it exists (default truncates) #type:bool

[debug]
_Help = Debugging options for the discerning masochist
verbose = 0              # Output verbosity level. #type:int #metavar:LEVEL
pdb = 0                  # Jumps into pdb on error. #type:bool

[misc]
_Help             = Miscellaneous options
random-seed       = None         # seed random number generator with explicit seed, if given. Useful for reproducibility
		   		  of the random-based optimizations (sparsification, etc.). #metavar:N
parset-version    = 0.1          # parset version number, for migration purposes. Can't be specified on command line. #no_cmdline:1



##  * ``DefaultParset.cfg`` now contains comment clauses which are auto-parsed into documentation by ``ReadCfg.py``, and
##  automatically converted into OptionParser command-line arguments. 
##
##  * Command-line arguments are formed as ``--Section-OptionName``.
##
##  * Each section can contain a ``_Help = section description`` option. This is turned into a docstring for the section.
##
##  * Each option line can contain a comment, preceded by "#". This is turned into a docstring for the option. Note that
##  long comments can be continued on the next line simply by indenting the next line. 
##
##  * Option comments can have embedded attributes of the form ``#attr:value``. These are removed from the docstring 
##  automatically. All attributes are optional! A few attributes have special meaning, as per below. 
##
##  * ``#type:TYPE`` forces the option to be interpreted as a specific Python type. E.g. ``#type:bool``, ``#type:str``,
##  ``#type:float``. In the absence of an explicit type attribute, the option will be parsed into a valid Python value 
##  (using ``eval()``), and converted into a string if that fails. This means that e.g. "None" will be interpreted as 
##  ``None`` and not the string ``"None"``. Note that this mechanism has some pitfalls: for example "all" gets parsed 
##  into the built-in ``all()`` function (unless surrounded by quotes), so if you want to make sure an option is treated 
##  as a string, make sure you add a ``#type:str`` attribute. 
##
##  * ``#options:A|B|C`` specifies that the option is a "selector" with a fixed set of values. See, for example, 
##  ``#options:None|LOFAR|FITS`` in BeamModel. 
##
##  * ``#metavar:VAR`` is passed to the metavar argument of ``OptionParser.add_option()``. This makes for a nicer-looking
##   command-line help. E.g. ``#metavar:MHz``. 
##
##  * ``#cmdline-only:1`` specifies that the option can only be changed from the command-line, not via a parset. 
##
##  * Options can have aliases. *NB: I'm not convinced about this feature. Maybe it makes things too confusing and should
##   be removed.* For example, 
##
##  ```
##  [Caching]
##  PSF|CachePSF            = 1         # Cache PSF data. May be expensive with large images, hence optional #type:bool
##  ```
##
##  means that the command-line option can be specified as ``--Caching-PSF`` or ``--CachePSF``. The second form is the 
##  "global alias". The GD object in DDFacet will contain both ``GD["Caching"]["PSF"]`` and 
##  ``GD["Caching"]["CachePSF"]``, set to the same value.
